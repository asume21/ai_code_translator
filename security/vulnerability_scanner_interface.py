"""
Interface for vulnerability scanning functionality.
"""

from typing import List, Dict, Any
from security.vulnerability_scanner import VulnerabilityScanner

class VulnerabilityScannerInterface:
    """Interface for vulnerability scanning functionality."""
    
    def __init__(self, vulnerability_scanner: VulnerabilityScanner = None):
        """Initialize the vulnerability scanner interface.
        
        Args:
            vulnerability_scanner: Optional vulnerability scanner instance
        """
        self.scanner = vulnerability_scanner
        if not self.scanner:
            self.scanner = VulnerabilityScanner(credentials_path="../config/gemini_credentials_template.json")
            
    def scan_code(self, code: str, language: str) -> List[Dict[str, Any]]:
        """
        Scan code for vulnerabilities.
        
        Args:
            code: The code to scan
            language: The programming language of the code
            
        Returns:
            List of vulnerability findings
        """
        if not self.scanner:
            raise ValueError("Vulnerability scanner not initialized")
        return self.scanner.scan_code(code, language)
        
    def get_vulnerability_patterns(self, language: str) -> List[Dict[str, Any]]:
        """
        Get vulnerability patterns for a specific language.
        
        Args:
            language: The programming language
            
        Returns:
            List of vulnerability patterns
        """
        if not self.scanner:
            raise ValueError("Vulnerability scanner not initialized")
        return self.scanner.get_vulnerability_patterns(language)
        
    def fix_vulnerability(self, code: str, vulnerability: Dict[str, Any]) -> str:
        """
        Fix a specific vulnerability in the code.
        
        Args:
            code: The original code
            vulnerability: The vulnerability to fix
            
        Returns:
            Fixed code
        """
        if not self.scanner:
            raise ValueError("Vulnerability scanner not initialized")
        return self.scanner.fix_vulnerability(code, vulnerability)
